//
// Created by user on 25.11.19.
//

#ifndef SYSTEM_SOLVER_LAB2_LAB_TASKS_CPP_
#define SYSTEM_SOLVER_LAB2_LAB_TASKS_CPP_

#include <cstdint>
namespace LAB2 {

Matrix<double> A_1 = {{1, -2, 1, 0, -1, 1, -2, 2, 0, -2},
                      {0, 2, 0, 0, 2, 1, -1, -1, -1, -2},
                      {0, 1, 0, -1, 1, -1, 0, -1, 1, -1},
                      {-2, -1, 2, -1, 0, 0, 0, 0, 1, 0},
                      {1, -2, 0, 1, 0, -2, -1, 0, 2, 2},
                      {-2, -2, 0, -2, 0, 1, 1, -2, 1, 1},
                      {-1, -2, -1, -1, -2, -1, -2, 1, -1, 2},
                      {-2, 1, 2, -2, 0, 2, 1, -1, -2, 2},
                      {0, 1, 0, 1, 1, -2, 2, 0, 1, 1},
                      {0, 0, 2, -1, -1, 0, -2, 2, -1, -1}};

Matrix<double> A_2 = {{-1, 1, -1, 0, -1, 0, -1, 1, 1, -1, 0, -1, -1, 1, 0, 0, 1, 1, 1, 1},
                      {-1, 0, -1, 1, -1, 0, 0, 0, 0, -1, 0, 0, -1, 1, 0, -1, 1, -1, -1, 0},
                      {1, 0, -1, 1, 0, 1, -1, -1, -1, 0, -1, -1, 1, -1, 1, 1, -1, 1, -1, 0},
                      {-1, 1, 0, 0, -1, 0, 0, -1, 0, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 0},
                      {1, 0, -1, 0, 0, -1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, -1, 0, 0, 1},
                      {0, 0, 0, 0, -1, 1, 1, 0, 0, 1, 1, 0, -1, 0, 1, 1, 0, 1, 0, 0},
                      {-1, 0, 1, 1, 1, -1, -1, 0, -1, 1, -1, -1, -1, 0, -1, 0, 0, 0, -1, 1},
                      {0, 0, -1, -1, 0, 1, 1, 1, 1, -1, 0, 0, -1, 1, 1, 1, 1, 0, 0, -1},
                      {0, 0, 1, 1, 0, 1, 1, 0, 1, -1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1},
                      {0, -1, 0, 0, 1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 1, -1, 0, 0, 1, 1},
                      {1, -1, 1, -1, -1, -1, 1, 0, -1, 0, 1, 1, -1, 0, 1, 1, 1, 0, 0, 0},
                      {0, 1, 0, 0, -1, 0, 1, 0, 1, 0, 0, 1, 1, -1, -1, 0, -1, 1, 1, -1},
                      {-1, -1, -1, -1, 0, 1, -1, 0, 0, -1, 0, 0, 0, 1, 1, 0, 0, 0, -1, 0},
                      {-1, 0, 1, 0, -1, 0, 0, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 0},
                      {1, -1, 0, -1, -1, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1, 1, 0, 0, -1, 0},
                      {-1, -1, 1, 0, -1, 1, 1, -1, 1, 0, 0, -1, 1, -1, -1, 0, 0, 1, 1, 1},
                      {0, 0, -1, 0, 0, 0, 0, -1, 1, 1, 0, -1, 1, -1, 0, 0, 0, -1, -1, 1},
                      {-1, 0, -1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 0, -1, 0, -1},
                      {-1, 0, 1, 0, 0, 0, 0, -1, 1, -1, 1, -1, 0, -1, -1, 1, 0, 1, 0, 0},
                      {0, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 0, -1, -1, 0, 1, 0, -1, -1}};

void SolveTask1() {
  Matrix<double> test = {{30, 24, -12},
                         {-31, -25, 12},
                         {10, 10, -6}};
  //getMaximalEigenValuesWithTheirEigenvectors(test);
  int _ = 10;
  while (_--) {
    cout << endl;
  }

  getMaximalEigenValuesWithTheirEigenvectors(A_1);
  _ = 10;
  while (_--) {
    cout << endl;
  }
  //getMaximalEigenValuesWithTheirEigenvectors(A_2);
}

void SolveTask2() {
  PrintMatrix(A_1);
  auto polynom_1 = applyDanilevskyMethod(A_1);
  PrintMatrix(polynom_1, "A_1");
  PrintMatrix(findRootsFromRangeBruteForce(polynom_1, -100, 100, 0.00001), "roots");
  return;

  PrintMatrix(applyDanilevskyMethod(A_2), "A_2");
}

void SolveTask3() {
  Matrix<double> test = {{1, 2, 3},
                         {4, 5, 6},
                         {7, 8, 10}};
  findingEigenpairsUsingQRAlgorithmWithReflectionsMethod(test);
}

}

#endif //SYSTEM_SOLVER_LAB2_LAB_TASKS_CPP_
